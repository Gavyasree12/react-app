name: CI/CD Pipeline for React App to AWS EKS...

on: 
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

permissions: 
  contents: write

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
  AWS_DEFAULT_REGION: "ap-south-1"    

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [19]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install && npm run build

  push-docker-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/react-app:latest .
      - run: docker push ${{ env.DOCKERHUB_USERNAME }}/react-app:latest  

  deploy:
    runs-on: ubuntu-latest
    needs: push-docker-image
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS CLI
        run: aws eks --region ap-south-1 update-kubeconfig --name demo-cluster
      - name: Apply deployment
        run: kubectl apply -f deployment.yml
      - name: Expose service
        run: kubectl expose deployment react-app --type=LoadBalancer --name=react-app-service
      - name: Get LoadBalancer DNS
        run: kubectl get svc react-app-service
