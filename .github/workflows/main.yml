name: CI/CD Pipeline for React App to AWS EKS

on:
  push:
    branches: ['master' , 'main']
  pull_request:
    branches: [ "master" , 'main']

permissions:
    contents: write   
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
  AWS_DEFAULT_REGION: "ap-south-1"    

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [19]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

  push-docker-image:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    needs: ['build']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - run: docker build -t manlineroot12/react-app:latest --no-cache .
      - run: docker push manlineroot12/react-app:latest  

  provision-aws-eks-cluster:
    runs-on: ubuntu-latest
    needs: ['build', 'push-docker-image']
    steps:
      - name: AWS EKS Deployment
        uses: actions/checkout@v3
 
      - name: Create eks cluster
        run: eksctl create cluster --region ap-south-1 --name demo-cluster --nodegroup-name node-group1 --node-type t2.micro --nodes 4
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}   
      - name: Sleep for 30 seconds
        run: sleep 60s
        shell: bash
        
  deploy:
    runs-on: ubuntu-latest
    needs: ['build', 'push-docker-image', 'provision-aws-eks-cluster']
    steps:
      - name: AWS EKS Deployment
        uses: actions/checkout@v3

      - name: Pull the Docker image
        run: docker pull manlineroot12/react-app:latest

      - name: Update kubeconfig
        run: aws eks --region ap-south-1 update-kubeconfig --name demo-cluster
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}    
    
      - name: Apply deployment
        run: kubectl apply -f deployment.yaml 
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}} 

      - name: Expose service
        run: kubectl expose deployment nginx-testing --type=LoadBalancer --name=nginx-testing
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}

      - name: Load Balancer DNS
        run: kubectl get services my-service 
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}
